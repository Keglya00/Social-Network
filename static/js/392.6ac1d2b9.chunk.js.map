{"version":3,"file":"static/js/392.6ac1d2b9.chunk.js","mappings":"2JACA,QAA0B,yBAA1B,EAAoE,gCAApE,EAAwH,mCAAxH,EAAqK,yBAArK,EAA0M,2BAA1M,EAAqQ,+CAArQ,EAAmV,8CAAnV,EAA+Z,6CCA/Z,EAAuB,mB,qBCQvB,MAQA,EARmCA,IAE3BC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,GAAO,YAAWC,OAAGJ,EAAUK,QAAUC,UAAWC,EAAeC,SACvER,EAAUS,WCXvB,EAA0B,yBAA1B,EAAoE,gCAApE,EAAqH,gCAArH,EAAqK,+BAArK,EAAuN,kCCoBvN,EAZsCC,IAE9BC,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAAqBJ,SAAA,EACjCP,EAAAA,EAAAA,KAAA,OAAKK,UAAWM,EAA6BC,IAAKH,EAAMI,SACxDH,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAA4BJ,SAAA,EACxCP,EAAAA,EAAAA,KAAA,OAAKK,UAAWM,EAA2BJ,SAAEE,EAAMK,WAClDL,EAAMM,cCAvB,EARwCN,IAEhCT,EAAAA,EAAAA,KAAA,OAAMK,UAAWM,EAA8BJ,SAC1CE,EAAMM,U,sBCYnB,MAoCMC,EAAqDP,IAEnDT,EAAAA,EAAAA,KAACiB,EAAAA,GAAI,CAACC,SAAWC,IAAcV,EAAMW,WAAWD,EAASE,eAAe,EAAEd,SACrEe,IAAA,IAAE,aAAEC,EAAY,KAAEC,GAAKF,EAAA,OACpBZ,EAAAA,EAAAA,MAAA,QAAMQ,SAAUK,EAAclB,UAAWoB,EAA0ClB,SAAA,EAC/EP,EAAAA,EAAAA,KAAC0B,EAAAA,GAAK,CAACC,SAAUC,EAAAA,EAAUC,YAAY,qBAAqBC,UAAW,WAAYC,KAAM,iBAAkB1B,UAAWoB,KACtHzB,EAAAA,EAAAA,KAAA,UAAQgC,UAAU,EAAOC,QAASA,KAC9BV,IACAC,EAAKU,OAAO,EACb7B,UAAWoB,MACX,IAMvB,EApDsChB,KAElC0B,EAAAA,EAAAA,YAAU,KACN1B,EAAM2B,iBACC,KACH3B,EAAM4B,eAAe,IAE1B,IAEH,IAOIC,EAAgB7B,EAAMV,UAAUwC,KAAKC,IAASxC,EAAAA,EAAAA,KAAA,MAAAO,UAAIP,EAAAA,EAAAA,KAACyC,EAAI,CAACjC,SAAUgC,EAAKhC,SAAUJ,OAAQoC,EAAKpC,aAE9FsC,EAAmBjC,EAAMkC,aAAaJ,KAAKxB,GAAYA,EAAQ6B,SAAWnC,EAAMoC,IAClF7C,EAAAA,EAAAA,KAAA,OAAKK,UAAWoB,EAAuBlB,UAACP,EAAAA,EAAAA,KAAC8C,EAAS,CAAC/B,QAASA,EAAQA,aACpEf,EAAAA,EAAAA,KAAA,OAAKK,UAAWoB,EAAqBlB,UAACP,EAAAA,EAAAA,KAAC+C,EAAO,CAAChC,QAASA,EAAQA,QAASF,MAAOE,EAAQF,MAAOC,SAAUC,EAAQD,eAGnH,OACIJ,EAAAA,EAAAA,MAAA,OAAKL,UAAWoB,EAAqBlB,SAAA,EACjCP,EAAAA,EAAAA,KAAA,MAAIK,UAAWoB,EAA4BlB,SACtC+B,KAEL5B,EAAAA,EAAAA,MAAA,OAAKL,UAAWoB,EAA+BlB,SAAA,CAC1CmC,GACD1C,EAAAA,EAAAA,KAACgB,EAAc,CAACI,WArBH4B,IACjBA,GAGJvC,EAAMwC,YAAYD,EAAW,SAmBvB,E,aCxBd,MAEA,GAFyBE,E,OAAAA,KAAuBC,EAAAA,EAAAA,KATzBC,IACZ,CACHrD,UAAWqD,EAAMC,eAAetD,UAChC4C,aAAcS,EAAMC,eAAeV,aACnCE,GAAIO,EAAME,YAAYC,KAAKV,MAKsG,CAACzB,WAAU,KAAEgB,eAAc,KAAEC,cAAa,KAAEY,YAAW,OAAIO,EAAAA,EAA3KN,CAA6LO,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://my-app/./src/components/Dialogs/Chat/Chat.module.scss?2b27","components/Dialogs/Chat/Chat.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.scss?a735","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/MyMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QWDer\",\"dialogs__chats\":\"Dialogs_dialogs__chats__Opjc5\",\"dialogs__messages\":\"Dialogs_dialogs__messages__AeTPA\",\"message\":\"Dialogs_message__CirTE\",\"mymessage\":\"Dialogs_mymessage__Y9tf2\",\"dialogs__addMessages_textarea\":\"Dialogs_dialogs__addMessages_textarea__AG7mQ\",\"dialogs__messages_addMessage\":\"Dialogs_dialogs__messages_addMessage__E+qYV\",\"dialogs__addMessages_button\":\"Dialogs_dialogs__addMessages_button__oMR8J\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__pSHfW\"};","import styleChat from './Chat.module.scss'\r\nimport { NavLink } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    username: string,\r\n    userid: string\r\n}\r\n\r\nconst Chat: React.FC<PropsType> = (chatsData) => {\r\n    return(\r\n        <NavLink to={`${'/dialogs/'}${chatsData.userid}`} className={styleChat.chat}>\r\n            {chatsData.username}\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default Chat","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__ZY+wS\",\"message__inner\":\"Message_message__inner__YllRJ\",\"message__photo\":\"Message_message__photo__cv1PH\",\"message__name\":\"Message_message__name__-kunO\",\"mymessage__inner\":\"Message_mymessage__inner__nYWNE\"};","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    photo: string,\r\n    userName: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={styleMessage.message}>\r\n            <img className={styleMessage.message__photo} src={props.photo} />\r\n            <div className={styleMessage.message__inner}>\r\n                <div className={styleMessage.message__name}>{props.userName}</div>\r\n                {props.message}\r\n            </div>\r\n        </div>     \r\n    )\r\n} \r\n\r\nexport default Message","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst MyMessage: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div  className={styleMessage.mymessage__inner}>\r\n            {props.message}\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default MyMessage","import React, { useEffect, useState } from 'react'\r\nimport styleDialogs from './Dialogs.module.scss'\r\nimport Chat from './Chat/Chat.tsx'\r\nimport Message from './Message/Message.tsx'\r\nimport MyMessage from './Message/MyMessage.tsx'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { required } from '../../utilits/validators.ts'\r\nimport { ChatType, MessageType} from '../../redux/dialogsReducer'\r\n\r\ntype PropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    id: number,\r\n    addMessage: (newMessage: MessageType) => void,\r\n    startWsChannel: () => void\r\n    stopWsChannel: () => void\r\n    sendMessage: (message: string) => void\r\n}\r\ntype AddMessageFormPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.startWsChannel()\r\n        return () => {\r\n            props.stopWsChannel()\r\n        }\r\n    }, [])\r\n\r\n    let onAddMessageClick = (newMessage: string) => {\r\n        if(!newMessage){\r\n            return\r\n        }\r\n        props.sendMessage(newMessage)\r\n    }\r\n\r\n    let chatsElements = props.chatsData.map((chat) => <li><Chat username={chat.username} userid={chat.userid}/></li>)\r\n\r\n    let messagesElements = props.messagesData.map((message) => message.userId === props.id \r\n    ? <div className={styleDialogs.mymessage}><MyMessage message={message.message} /></div>\r\n    : <div className={styleDialogs.message}><Message message={message.message} photo={message.photo} userName={message.userName}/></div>\r\n    )\r\n\r\n    return(\r\n        <div className={styleDialogs.dialogs}>\r\n            <ul className={styleDialogs.dialogs__chats}>\r\n                {chatsElements}\r\n            </ul>\r\n            <div className={styleDialogs.dialogs__messages}>\r\n                {messagesElements}\r\n                <AddMessageForm addMessage={onAddMessageClick} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={(formData) => {props.addMessage(formData.newMessageBody)}}>\r\n            {( { handleSubmit, form} ) => (\r\n                <form onSubmit={handleSubmit} className={styleDialogs.dialogs__messages_addMessage}>\r\n                    <Field validate={required} placeholder='Enter your message' component={'textarea'} name={'newMessageBody'} className={styleDialogs.dialogs__addMessages_textarea}></Field>\r\n                    <button disabled={false} onClick={() => {\r\n                        handleSubmit()\r\n                        form.reset()\r\n                    }} className={styleDialogs.dialogs__addMessages_button}></button>\r\n                </form>\r\n            )}\r\n        </Form>   \r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, { ComponentType } from 'react'\r\nimport { ChatType, MessageType, addMessage, sendMessage, startWsChannel, stopWsChannel} from '../../redux/dialogsReducer.ts'\r\nimport { MapDispatchToProps, connect } from 'react-redux'\r\nimport Dialogs from './Dialogs.tsx'\r\nimport { withAuthReirect } from '../../hoc/withAuthRedirect.tsx'\r\nimport { compose } from 'redux'\r\nimport { RootStateType } from '../../redux/redux-store.ts'\r\n\r\ntype MapStateToPropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    id: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessage: MessageType) => void\r\n    startWsChannel: () => void\r\n    stopWsChannel: () => void\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        chatsData: state.dialogsReducer.chatsData,\r\n        messagesData: state.dialogsReducer.messagesData,\r\n        id: state.authReducer.data.id\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ComponentType>(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>(mapStateToProps, {addMessage, startWsChannel, stopWsChannel, sendMessage}), withAuthReirect )(Dialogs)\r\n\r\nexport default DialogsContainer"],"names":["chatsData","_jsx","NavLink","to","concat","userid","className","styleChat","children","username","props","_jsxs","styleMessage","src","photo","userName","message","AddMessageForm","Form","onSubmit","formData","addMessage","newMessageBody","_ref","handleSubmit","form","styleDialogs","Field","validate","required","placeholder","component","name","disabled","onClick","reset","useEffect","startWsChannel","stopWsChannel","chatsElements","map","chat","Chat","messagesElements","messagesData","userId","id","MyMessage","Message","newMessage","sendMessage","compose","connect","state","dialogsReducer","authReducer","data","withAuthReirect","Dialogs"],"sourceRoot":""}