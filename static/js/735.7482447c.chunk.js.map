{"version":3,"file":"static/js/735.7482447c.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Users/Users.module.scss?b204","webpack://my-app/./src/components/Users/User/User.module.scss?c19e","components/Users/User/User.tsx","webpack://my-app/./src/components/Common/Paginator/Paginator.module.scss?35e6","components/Common/Paginator/Paginator.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users__item\":\"Users_users__item__uqeIj\",\"users\":\"Users_users__llCTN\",\"users__button\":\"Users_users__button__gfJkK\",\"user__link\":\"Users_user__link__5vCqM\",\"search\":\"Users_search__bbca-\",\"paginator\":\"Users_paginator__6-AmL\",\"search__button_container\":\"Users_search__button_container__CSQC3\",\"search__button\":\"Users_search__button__vWrr1\",\"search__input\":\"Users_search__input__r9TYh\"};","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"User_user__FJrtR\",\"user__noavatar\":\"User_user__noavatar__W9KeQ\",\"user__avatar\":\"User_user__avatar__JkXf+\",\"user__description\":\"User_user__description__lBff1\",\"user__description_status\":\"User_user__description_status__6r3Il\"};","import { NavLink } from 'react-router-dom'\r\nimport styleUser from './User.module.scss'\r\nimport noAvatar from '../../../emptyAvatar.jpg'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    id: number,\r\n    name: string,\r\n    status: string | null,\r\n    avatar: string | null\r\n}\r\n\r\n const User: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={styleUser.user}>\r\n            {props.avatar === null ? <div><img  className={styleUser.user__noavatar} src={noAvatar}/></div> : <img className={styleUser.user__avatar} src={props.avatar} /> }\r\n            <div className={styleUser.user__description}>\r\n                <div className={styleUser.user__description_name}>\r\n                    {props.name}\r\n                </div>\r\n                <div className={styleUser.user__description_status}>\r\n                    {props.status === null ? <div>No status</div> : props.status}\r\n                </div>\r\n            </div>  \r\n        </div>\r\n    )\r\n }\r\n\r\n export default User","// extracted by mini-css-extract-plugin\nexport default {\"page_active\":\"Paginator_page_active__UnnoX\",\"pages__container\":\"Paginator_pages__container__RDmlv\",\"page\":\"Paginator_page__Qkzu-\",\"button_next\":\"Paginator_button_next__ABSWm\",\"button_prev\":\"Paginator_button_prev__C01kN\",\"button\":\"Paginator_button__xKydv\"};","import stylePaginator from './Paginator.module.scss'\r\nimport arrow from '../../../images/arrow.png'\r\nimport { useState } from 'react'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    pagesCount: number,\r\n    portionSize: number,\r\n    portionsCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    let pages: Array<number> = []\r\n    for(let i=1; i <= props.pagesCount; i++){ \r\n        pages.push(i)\r\n    }\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n    return (\r\n        <div className={stylePaginator.pages__container}>\r\n            {portionNumber > 1 && <span className={stylePaginator.button} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n                props.onPageChanged(leftPortionPageNumber - 1)\r\n            }} ><img className={stylePaginator.button_prev} src={arrow} /></span>}\r\n            {pages\r\n            .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n            .map(page => <span onClick={() => {props.onPageChanged(page)}} className={props.currentPage === page ? stylePaginator.page_active : stylePaginator.page } >{page}</span>)\r\n            }\r\n            {props.portionsCount > portionNumber && <span className={stylePaginator.button} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n                props.onPageChanged(rightPortionPageNumber + 1)\r\n            }} ><img  className={stylePaginator.button_next} src={arrow} /></span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import styleUsers from './Users.module.scss'\r\nimport searchIcon from '../../images/searchIcon.png'\r\nimport User from \"./User/User.tsx\"\r\nimport Paginator from '../Common/Paginator/Paginator.tsx'\r\nimport React from 'react'\r\nimport { UsersDataType } from '../../redux/usersReducer.ts'\r\nimport { Field, Form, Formik } from 'formik'\r\nimport { NavLink } from 'react-router-dom'\r\nimport MenuButton from '../Common/MenuButton/MenuButton.tsx'\r\n\r\ntype PropsType = {\r\n    pagesCount: number,\r\n    currentPage: number,\r\n    usersData: Array<UsersDataType>,\r\n    onUserFollow: (userId: number) => void,\r\n    onUserUnfollow: (userId: number) => void,\r\n    onPageChanged: (page: number) => void,\r\n    onTermChanged: (term: string) => void,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n    portionsCount: number,\r\n    portionSize: number,\r\n    term: string\r\n}\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    let usersElements = props.usersData.map(\r\n            (user) => \r\n            <NavLink to={'/profile/' + user.id} className={styleUsers.users__item}>\r\n                <User key={user.id} id={user.id} name={user.name} status={user.status} avatar={user.photos.small} />\r\n                {user.followed \r\n                ? <button className={styleUsers.users__button} disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {props.onUserUnfollow(user.id)}} >unfollow</button> \r\n                : <button className={styleUsers.users__button} disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {props.onUserFollow(user.id)}} >follow</button>\r\n                }\r\n            </NavLink>\r\n        )\r\n\r\n    return(\r\n        <>\r\n        <MenuButton />\r\n        <div className={styleUsers.users__container}>\r\n            <div>\r\n                <UserSearchForm onTermChanged={props.onTermChanged} term={props.term}/>\r\n            </div>\r\n            <div className={styleUsers.users}>\r\n                {usersElements}\r\n                \r\n            </div>\r\n            <div className={styleUsers.paginator}>\r\n            <Paginator currentPage={props.currentPage} onPageChanged={props.onPageChanged} portionSize={props.portionSize} portionsCount={props.portionsCount} pagesCount={props.pagesCount} />\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\ntype FormPropsType = {\r\n    onTermChanged: (term: string) => void\r\n    term: string\r\n}\r\n\r\nconst UserSearchForm: React.FC<FormPropsType> = (props) => {\r\n\r\n    type FormValuesType = {term: string}\r\n    const submit = (values: FormValuesType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n        props.onTermChanged(values.term)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{term: props.term}}\r\n        onSubmit={submit}>\r\n        {({isSubmitting}) => (\r\n            <Form  className={styleUsers.search}>\r\n                <Field className={styleUsers.search__input} onChange={(e) => props.onTermChanged(e.currentTarget.value)} placeholder='search' type='text' name='term' />\r\n                <button className={styleUsers.search__button_container} type='submit' disabled={isSubmitting}><img className={styleUsers.search__button} src={searchIcon}/></button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Users","import { createSelector } from \"reselect\"\r\nimport { RootStateType } from \"./redux-store\"\r\n\r\nexport const getUsersData = (state: RootStateType) => {\r\n    return state.usersReducer.usersData\r\n}\r\n\r\nexport const getPageSize = (state: RootStateType) => {\r\n    return state.usersReducer.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootStateType) => {\r\n    return state.usersReducer.totalUsersCount\r\n}\r\n\r\nexport const getPagesCount = createSelector(getPageSize, getTotalUsersCount, (pageSize, totalUsersCount) => {\r\n    return Math.ceil(totalUsersCount / pageSize)\r\n})\r\n\r\nexport const getPortionSize = (state: RootStateType) => {\r\n    return state.usersReducer.portionSize\r\n}\r\n\r\nexport const getPortionsCount = createSelector(getPortionSize, getPagesCount, (portionSize, pagesCount) => {\r\n    return Math.ceil(pagesCount / portionSize)\r\n})\r\n\r\nexport const getCurrentPage = (state: RootStateType) => {\r\n    return state.usersReducer.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: RootStateType) => {\r\n    return state.usersReducer.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: RootStateType) => {\r\n    return state.usersReducer.followingInProgress\r\n}\r\n\r\nexport const getTerm = (state: RootStateType) => {\r\n    return state.usersReducer.term\r\n}","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUsersThunkCreator, unfollowThunkCreator, followThunkCreator, setCurrentPage, UsersDataType, setTerm } from \"../../redux/usersReducer.ts\";\r\nimport Users from './Users.tsx'\r\nimport Preloader from \"../Common/Preloader/Preloader.tsx\";\r\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getPagesCount, getPortionSize, getPortionsCount, getTerm, getUsersData } from \"../../redux/usersSelectors.ts\";\r\nimport { RootStateType } from \"../../redux/redux-store.ts\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    pagesCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    usersData: Array<UsersDataType>,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n    portionsCount: number,\r\n    portionSize: number,\r\n    term: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number, term: string) => void\r\n    setCurrentPage: (page: number) => void,\r\n    followThunkCreator: (userId: number) => void,\r\n    unfollowThunkCreator: (userId: number) => void,\r\n    setTerm: (term: string) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst UsersApiComponent: React.FC<PropsType> = (props) => {\r\n\r\n    const[searchParams, setSearchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n        const parsed = Object.fromEntries(searchParams) as {term: string, page: string, count: string}\r\n\r\n        let actualPage = props.currentPage\r\n        if(parsed.page){actualPage = Number(parsed.page)}\r\n        let actualTerm = props.term\r\n        if(parsed.term){actualTerm = parsed.term}\r\n\r\n        props.getUsersThunkCreator(actualPage, props.pageSize, actualTerm)\r\n    }, [])\r\n\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        navigate({\r\n            pathname:'/users',\r\n            search: `?term=${props.term}&count=${props.pageSize}&page=${props.currentPage}`\r\n        })\r\n    }, [props.term, props.currentPage, props.pageSize])\r\n\r\n    let onPageChanged = (page: number) => {\r\n        props.setCurrentPage(page)\r\n        props.getUsersThunkCreator(page, props.pageSize, props.term)\r\n    }\r\n\r\n    let onUserFollow = (userId: number) => {\r\n        props.followThunkCreator(userId)\r\n    }\r\n\r\n    let onUserUnfollow = (userId: number) => {\r\n        props.unfollowThunkCreator(userId)\r\n    }\r\n\r\n    let onTermChanged = (term: string) => {\r\n        props.setTerm(term)\r\n        props.setCurrentPage(1)\r\n        props.getUsersThunkCreator(1, props.pageSize, term)\r\n    }\r\n\r\n    return (\r\n            <>\r\n                {props.isFetching ? <Preloader /> : null}\r\n                <Users\r\n                    pagesCount={props.pagesCount}\r\n                    currentPage={props.currentPage}\r\n                    usersData={props.usersData}\r\n                    onUserFollow={onUserFollow}\r\n                    onUserUnfollow={onUserUnfollow}\r\n                    isFetching={props.isFetching}\r\n                    onPageChanged={onPageChanged}\r\n                    followingInProgress={props.followingInProgress}\r\n                    portionsCount={props.portionsCount}\r\n                    portionSize={props.portionSize}\r\n                    onTermChanged={onTermChanged}\r\n                    term={props.term}\r\n                />\r\n            </>\r\n    )       \r\n}\r\n\r\n \r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        usersData: getUsersData(state),\r\n        pagesCount : getPagesCount(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionsCount: getPortionsCount(state),\r\n        portionSize: getPortionSize(state),\r\n        term: getTerm(state)\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {} , RootStateType>(mapStateToProps, { getUsersThunkCreator, unfollowThunkCreator, followThunkCreator, setCurrentPage, setTerm })(UsersApiComponent)\r\n\r\nexport default React.memo(UsersContainer)"],"names":["props","_jsxs","className","styleUser","user","children","avatar","_jsx","user__noavatar","src","noAvatar","user__avatar","user__description","user__description_name","name","user__description_status","status","pages","i","pagesCount","push","portionNumber","setPortionNumber","useState","leftPortionPageNumber","portionSize","rightPortionPageNumber","stylePaginator","onClick","onPageChanged","arrow","filter","page","map","currentPage","portionsCount","UserSearchForm","Formik","enableReinitialize","initialValues","term","onSubmit","submit","values","_ref","setSubmitting","onTermChanged","_ref2","isSubmitting","Form","styleUsers","search","Field","search__input","onChange","e","currentTarget","value","placeholder","type","search__button_container","disabled","search__button","usersElements","usersData","NavLink","to","id","users__item","User","photos","small","followed","users__button","followingInProgress","some","onUserUnfollow","onUserFollow","_Fragment","MenuButton","users__container","users","paginator","Paginator","getUsersData","state","usersReducer","getPageSize","pageSize","getPagesCount","createSelector","totalUsersCount","Math","ceil","getPortionSize","getPortionsCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getTerm","UsersContainer","connect","getUsersThunkCreator","unfollowThunkCreator","followThunkCreator","setCurrentPage","setTerm","searchParams","setSearchParams","useSearchParams","useEffect","parsed","Object","fromEntries","actualPage","Number","actualTerm","navigate","useNavigate","pathname","concat","Preloader","Users","userId","React"],"sourceRoot":""}