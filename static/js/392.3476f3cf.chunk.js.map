{"version":3,"file":"static/js/392.3476f3cf.chunk.js","mappings":"yJACA,QAA0B,yBAA1B,EAAoE,gCAApE,EAAwH,mCAAxH,EAAuK,2BAAvK,EAAkO,+CAAlO,EAAgT,8CAAhT,EAA4X,6CCA5X,EAAuB,mB,qBCQvB,MAQA,EARmCA,IAE3BC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,GAAO,YAAWC,OAAGJ,EAAUK,QAAUC,UAAWC,EAAeC,SACvER,EAAUS,WCXvB,EAA0B,yBAA1B,EAAsE,kCCctE,EARsCC,IAE9BT,EAAAA,EAAAA,KAAA,OAAMK,UAAWK,EAAqBH,SACjCE,EAAaE,UCK1B,EARwCF,IAEhCT,EAAAA,EAAAA,KAAA,OAAMK,UAAWK,EAA8BH,SAC1CE,EAAaE,U,sBCS1B,MAyBMC,EAAqDC,IAEnDb,EAAAA,EAAAA,KAACc,EAAAA,GAAI,CAACC,SAAWC,IAAcH,EAAMI,WAAWD,EAASE,eAAe,EAAEX,SACrEY,IAAA,IAAE,aAAEC,EAAY,KAAEC,GAAKF,EAAA,OACpBG,EAAAA,EAAAA,MAAA,QAAMP,SAAUK,EAAcf,UAAWkB,EAA0ChB,SAAA,EAC/EP,EAAAA,EAAAA,KAACwB,EAAAA,GAAK,CAACC,SAAUC,EAAAA,EAAUC,YAAY,qBAAqBC,UAAW,WAAYC,KAAM,iBAAkBxB,UAAWkB,KACtHvB,EAAAA,EAAAA,KAAA,UAAQ8B,QAASA,KACbV,IACAC,EAAKU,OAAO,EACb1B,UAAWkB,MACX,IAMvB,EAzCsCV,IAElC,IAIImB,EAAgBnB,EAAMd,UAAUkC,KAAKC,IAASlC,EAAAA,EAAAA,KAAA,MAAAO,UAAIP,EAAAA,EAAAA,KAACmC,EAAI,CAAC3B,SAAU0B,EAAK1B,SAAUJ,OAAQ8B,EAAK9B,aAE9FgC,EAAmBvB,EAAMJ,aAAawB,KAAKtB,IAC1B,IAAjBA,EAAQ0B,QAAgBrC,EAAAA,EAAAA,KAAA,OAAKK,UAAWkB,EAAuBhB,UAACP,EAAAA,EAAAA,KAACsC,EAAS,CAAC3B,QAASA,EAAQA,aAAkBX,EAAAA,EAAAA,KAACuC,EAAO,CAAC5B,QAASA,EAAQA,YAG5I,OACIW,EAAAA,EAAAA,MAAA,OAAKjB,UAAWkB,EAAqBhB,SAAA,EACjCP,EAAAA,EAAAA,KAAA,MAAIK,UAAWkB,EAA4BhB,SACtCyB,KAELV,EAAAA,EAAAA,MAAA,OAAKjB,UAAWkB,EAA+BhB,SAAA,CAC1C6B,GACDpC,EAAAA,EAAAA,KAACY,EAAc,CAACK,WAjBHuB,IACrB3B,EAAMI,WAAWuB,EAAW,SAkBtB,E,aCRd,MAEA,GAFyBC,E,OAAAA,KAAuBC,EAAAA,EAAAA,KAfzBC,IACZ,CACH5C,UAAW4C,EAAMC,eAAe7C,UAChCU,aAAckC,EAAMC,eAAenC,iBAIjBoC,IAChB,CACF5B,WAAauB,IACTK,GAASC,EAAAA,EAAAA,GAAwBN,GAAY,MAKqGO,EAAAA,EAArIN,CAAuJO,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://my-app/./src/components/Dialogs/Chat/Chat.module.scss?2b27","components/Dialogs/Chat/Chat.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.scss?a735","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/MyMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QWDer\",\"dialogs__chats\":\"Dialogs_dialogs__chats__Opjc5\",\"dialogs__messages\":\"Dialogs_dialogs__messages__AeTPA\",\"mymessage\":\"Dialogs_mymessage__Y9tf2\",\"dialogs__addMessages_textarea\":\"Dialogs_dialogs__addMessages_textarea__AG7mQ\",\"dialogs__messages_addMessage\":\"Dialogs_dialogs__messages_addMessage__E+qYV\",\"dialogs__addMessages_button\":\"Dialogs_dialogs__addMessages_button__oMR8J\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__pSHfW\"};","import styleChat from './Chat.module.scss'\r\nimport { NavLink } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    username: string,\r\n    userid: string\r\n}\r\n\r\nconst Chat: React.FC<PropsType> = (chatsData) => {\r\n    return(\r\n        <NavLink to={`${'/dialogs/'}${chatsData.userid}`} className={styleChat.chat}>\r\n            {chatsData.username}\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default Chat","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__ZY+wS\",\"mymessage__inner\":\"Message_mymessage__inner__nYWNE\"};","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (messagesData) => {\r\n    return(\r\n        <div  className={styleMessage.message}>\r\n            {messagesData.message}\r\n        </div>       \r\n    )\r\n} \r\n\r\nexport default Message","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst MyMessage: React.FC<PropsType> = (messagesData) => {\r\n    return(\r\n        <div  className={styleMessage.mymessage__inner}>\r\n            {messagesData.message}\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default MyMessage","import React from 'react'\r\nimport styleDialogs from './Dialogs.module.scss'\r\nimport Chat from './Chat/Chat.tsx'\r\nimport Message from './Message/Message.tsx'\r\nimport MyMessage from './Message/MyMessage.tsx'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { required } from '../../utilits/validators.ts'\r\nimport { ChatType, MessageType } from '../../redux/dialogsReducer'\r\n\r\ntype PropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\ntype AddMessageFormPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let onAddMessageClick = (newMessage: string) => {\r\n        props.addMessage(newMessage)\r\n    }\r\n\r\n    let chatsElements = props.chatsData.map((chat) => <li><Chat username={chat.username} userid={chat.userid}/></li>)\r\n\r\n    let messagesElements = props.messagesData.map((message) => \r\n        message.isMine===true ? <div className={styleDialogs.mymessage}><MyMessage message={message.message}/></div> :<Message message={message.message}/>\r\n    )\r\n\r\n    return(\r\n        <div className={styleDialogs.dialogs}>\r\n            <ul className={styleDialogs.dialogs__chats}>\r\n                {chatsElements}\r\n            </ul>\r\n            <div className={styleDialogs.dialogs__messages}>\r\n                {messagesElements}\r\n                <AddMessageForm addMessage={onAddMessageClick} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={(formData) => {props.addMessage(formData.newMessageBody)}}>\r\n            {( { handleSubmit, form} ) => (\r\n                <form onSubmit={handleSubmit} className={styleDialogs.dialogs__messages_addMessage}>\r\n                    <Field validate={required} placeholder='Enter your message' component={'textarea'} name={'newMessageBody'} className={styleDialogs.dialogs__addMessages_textarea}></Field>\r\n                    <button onClick={() => {\r\n                        handleSubmit()\r\n                        form.reset()\r\n                    }} className={styleDialogs.dialogs__addMessages_button}></button>\r\n                </form>\r\n            )}\r\n        </Form>   \r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, { ComponentType } from 'react'\r\nimport { ChatType, MessageType, addMessageActionCreator} from '../../redux/dialogsReducer.ts'\r\nimport { MapDispatchToProps, connect } from 'react-redux'\r\nimport Dialogs from './Dialogs.tsx'\r\nimport { withAuthReirect } from '../../hoc/withAuthRedirect.tsx'\r\nimport { compose } from 'redux'\r\nimport { RootStateType } from '../../redux/redux-store.ts'\r\n\r\ntype MapStateToPropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        chatsData: state.dialogsReducer.chatsData,\r\n        messagesData: state.dialogsReducer.messagesData\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\r\n    return{\r\n        addMessage: (newMessage: string) => {\r\n            dispatch(addMessageActionCreator(newMessage))\r\n        },\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<ComponentType>(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps), withAuthReirect )(Dialogs)\r\n\r\nexport default DialogsContainer"],"names":["chatsData","_jsx","NavLink","to","concat","userid","className","styleChat","children","username","messagesData","styleMessage","message","AddMessageForm","props","Form","onSubmit","formData","addMessage","newMessageBody","_ref","handleSubmit","form","_jsxs","styleDialogs","Field","validate","required","placeholder","component","name","onClick","reset","chatsElements","map","chat","Chat","messagesElements","isMine","MyMessage","Message","newMessage","compose","connect","state","dialogsReducer","dispatch","addMessageActionCreator","withAuthReirect","Dialogs"],"sourceRoot":""}