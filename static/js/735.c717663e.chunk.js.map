{"version":3,"file":"static/js/735.c717663e.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Users/Users.module.scss?b204","webpack://my-app/./src/components/Users/User/User.module.scss?c19e","components/Users/User/User.tsx","webpack://my-app/./src/components/Common/Paginator/Paginator.module.scss?35e6","components/Common/Paginator/Paginator.tsx","components/Users/Users.tsx","redux/usersSelectors.ts","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"users__item\":\"Users_users__item__uqeIj\",\"users\":\"Users_users__llCTN\",\"users__button\":\"Users_users__button__gfJkK\",\"search\":\"Users_search__bbca-\",\"paginator\":\"Users_paginator__6-AmL\",\"search__button_container\":\"Users_search__button_container__CSQC3\",\"search__button\":\"Users_search__button__vWrr1\",\"search__input\":\"Users_search__input__r9TYh\"};","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"User_user__FJrtR\",\"user__noavatar\":\"User_user__noavatar__W9KeQ\",\"user__avatar\":\"User_user__avatar__JkXf+\",\"user__description\":\"User_user__description__lBff1\",\"user__description_status\":\"User_user__description_status__6r3Il\"};","import { NavLink } from 'react-router-dom'\r\nimport styleUser from './User.module.scss'\r\nimport noAvatar from '../../../emptyAvatar.jpg'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    id: number,\r\n    name: string,\r\n    status: string | null,\r\n    avatar: string | null\r\n}\r\n\r\n const User: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={styleUser.user}>\r\n            <NavLink to={'/profile/' + props.id}>\r\n                {props.avatar === null ? <div><img  className={styleUser.user__noavatar} src={noAvatar}/></div> : <img className={styleUser.user__avatar} src={props.avatar} /> }\r\n            </NavLink>\r\n            <div className={styleUser.user__description}>\r\n                <div className={styleUser.user__description_name}>\r\n                    {props.name}\r\n                </div>\r\n                <div className={styleUser.user__description_status}>\r\n                    {props.status === null ? <div>No status</div> : props.status}\r\n                </div>\r\n            </div>  \r\n        </div>\r\n    )\r\n }\r\n\r\n export default User","// extracted by mini-css-extract-plugin\nexport default {\"page_active\":\"Paginator_page_active__UnnoX\",\"pages__container\":\"Paginator_pages__container__RDmlv\",\"page\":\"Paginator_page__Qkzu-\",\"button_next\":\"Paginator_button_next__ABSWm\",\"button_prev\":\"Paginator_button_prev__C01kN\",\"button\":\"Paginator_button__xKydv\"};","import stylePaginator from './Paginator.module.scss'\r\nimport arrow from '../../../images/arrow.png'\r\nimport { useState } from 'react'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    pagesCount: number,\r\n    portionSize: number,\r\n    portionsCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (page: number) => void\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = (props) => {\r\n    let pages: Array<number> = []\r\n    for(let i=1; i <= props.pagesCount; i++){ \r\n        pages.push(i)\r\n    }\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n    return (\r\n        <div className={stylePaginator.pages__container}>\r\n            {portionNumber > 1 && <span className={stylePaginator.button} onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n                props.onPageChanged(leftPortionPageNumber - 1)\r\n            }} ><img className={stylePaginator.button_prev} src={arrow} /></span>}\r\n            {pages\r\n            .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n            .map(page => <span onClick={() => {props.onPageChanged(page)}} className={props.currentPage === page ? stylePaginator.page_active : stylePaginator.page } >{page}</span>)\r\n            }\r\n            {props.portionsCount > portionNumber && <span className={stylePaginator.button} onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n                props.onPageChanged(rightPortionPageNumber + 1)\r\n            }} ><img  className={stylePaginator.button_next} src={arrow} /></span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator","import styleUsers from './Users.module.scss'\r\nimport searchIcon from '../../images/searchIcon.png'\r\nimport User from \"./User/User.tsx\"\r\nimport Paginator from '../Common/Paginator/Paginator.tsx'\r\nimport React from 'react'\r\nimport { UsersDataType } from '../../redux/usersReducer.ts'\r\nimport { Field, Form, Formik } from 'formik'\r\n\r\ntype PropsType = {\r\n    pagesCount: number,\r\n    currentPage: number,\r\n    usersData: Array<UsersDataType>,\r\n    onUserFollow: (userId: number) => void,\r\n    onUserUnfollow: (userId: number) => void,\r\n    onPageChanged: (page: number) => void,\r\n    onTermChanged: (term: string) => void,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n    portionsCount: number,\r\n    portionSize: number,\r\n    term: string\r\n}\r\n\r\nconst Users: React.FC<PropsType> = (props) => {\r\n    let usersElements = props.usersData.map(\r\n            (user) => \r\n            <li className={styleUsers.users__item}>\r\n                <User key={user.id} id={user.id} name={user.name} status={user.status} avatar={user.photos.small} />\r\n                {user.followed \r\n                ? <button className={styleUsers.users__button} disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {props.onUserUnfollow(user.id)}} >unfollow</button> \r\n                : <button className={styleUsers.users__button} disabled={props.followingInProgress.some(id => id === user.id)} onClick={() => {props.onUserFollow(user.id)}} >follow</button>\r\n                }\r\n            </li>\r\n        \r\n        )\r\n\r\n    return(\r\n        <div className={styleUsers.users__container}>\r\n            <div>\r\n                <UserSearchForm onTermChanged={props.onTermChanged} term={props.term}/>\r\n            </div>\r\n            <div className={styleUsers.users}>\r\n                {usersElements}\r\n                \r\n            </div>\r\n            <div className={styleUsers.paginator}>\r\n            <Paginator currentPage={props.currentPage} onPageChanged={props.onPageChanged} portionSize={props.portionSize} portionsCount={props.portionsCount} pagesCount={props.pagesCount} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormPropsType = {\r\n    onTermChanged: (term: string) => void\r\n    term: string\r\n}\r\n\r\nconst UserSearchForm: React.FC<FormPropsType> = (props) => {\r\n\r\n    type FormValuesType = {term: string}\r\n    const submit = (values: FormValuesType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void}) => {\r\n        props.onTermChanged(values.term)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{term: props.term}}\r\n        onSubmit={submit}>\r\n        {({isSubmitting}) => (\r\n            <Form  className={styleUsers.search}>\r\n                <Field className={styleUsers.search__input} onChange={(e) => props.onTermChanged(e.currentTarget.value)} placeholder='search' type='text' name='term' />\r\n                <button className={styleUsers.search__button_container} type='submit' disabled={isSubmitting}><img className={styleUsers.search__button} src={searchIcon}/></button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Users","import { createSelector } from \"reselect\"\r\nimport { RootStateType } from \"./redux-store\"\r\n\r\nexport const getUsersData = (state: RootStateType) => {\r\n    return state.usersReducer.usersData\r\n}\r\n\r\nexport const getPageSize = (state: RootStateType) => {\r\n    return state.usersReducer.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootStateType) => {\r\n    return state.usersReducer.totalUsersCount\r\n}\r\n\r\nexport const getPagesCount = createSelector(getPageSize, getTotalUsersCount, (pageSize, totalUsersCount) => {\r\n    return Math.ceil(totalUsersCount / pageSize)\r\n})\r\n\r\nexport const getPortionSize = (state: RootStateType) => {\r\n    return state.usersReducer.portionSize\r\n}\r\n\r\nexport const getPortionsCount = createSelector(getPortionSize, getPagesCount, (portionSize, pagesCount) => {\r\n    return Math.ceil(pagesCount / portionSize)\r\n})\r\n\r\nexport const getCurrentPage = (state: RootStateType) => {\r\n    return state.usersReducer.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: RootStateType) => {\r\n    return state.usersReducer.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: RootStateType) => {\r\n    return state.usersReducer.followingInProgress\r\n}\r\n\r\nexport const getTerm = (state: RootStateType) => {\r\n    return state.usersReducer.term\r\n}","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUsersThunkCreator, unfollowThunkCreator, followThunkCreator, setCurrentPage, UsersDataType, setTerm } from \"../../redux/usersReducer.ts\";\r\nimport Users from './Users.tsx'\r\nimport Preloader from \"../Common/Preloader/Preloader.tsx\";\r\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getPagesCount, getPortionSize, getPortionsCount, getTerm, getUsersData } from \"../../redux/usersSelectors.ts\";\r\nimport { RootStateType } from \"../../redux/redux-store.ts\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\n\r\ntype MapStateToPropsType = {\r\n    pagesCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    usersData: Array<UsersDataType>,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>,\r\n    portionsCount: number,\r\n    portionSize: number,\r\n    term: string\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUsersThunkCreator: (currentPage: number, pageSize: number, term: string) => void\r\n    setCurrentPage: (page: number) => void,\r\n    followThunkCreator: (userId: number) => void,\r\n    unfollowThunkCreator: (userId: number) => void,\r\n    setTerm: (term: string) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst UsersApiComponent: React.FC<PropsType> = (props) => {\r\n\r\n    const[searchParams, setSearchParams] = useSearchParams()\r\n\r\n    useEffect(() => {\r\n        const parsed = Object.fromEntries(searchParams) as {term: string, page: string, count: string}\r\n\r\n        let actualPage = props.currentPage\r\n        if(parsed.page){actualPage = Number(parsed.page)}\r\n        let actualTerm = props.term\r\n        if(parsed.term){actualTerm = parsed.term}\r\n\r\n        props.getUsersThunkCreator(actualPage, props.pageSize, actualTerm)\r\n    }, [])\r\n\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        navigate({\r\n            pathname:'/users',\r\n            search: `?term=${props.term}&count=${props.pageSize}&page=${props.currentPage}`\r\n        })\r\n    }, [props.term, props.currentPage, props.pageSize])\r\n\r\n    let onPageChanged = (page: number) => {\r\n        props.setCurrentPage(page)\r\n        props.getUsersThunkCreator(page, props.pageSize, props.term)\r\n    }\r\n\r\n    let onUserFollow = (userId: number) => {\r\n        props.followThunkCreator(userId)\r\n    }\r\n\r\n    let onUserUnfollow = (userId: number) => {\r\n        props.unfollowThunkCreator(userId)\r\n    }\r\n\r\n    let onTermChanged = (term: string) => {\r\n        props.setTerm(term)\r\n        props.setCurrentPage(1)\r\n        props.getUsersThunkCreator(1, props.pageSize, term)\r\n    }\r\n\r\n    return (\r\n            <>\r\n                {props.isFetching ? <Preloader /> : null}\r\n                <Users\r\n                    pagesCount={props.pagesCount}\r\n                    currentPage={props.currentPage}\r\n                    usersData={props.usersData}\r\n                    onUserFollow={onUserFollow}\r\n                    onUserUnfollow={onUserUnfollow}\r\n                    isFetching={props.isFetching}\r\n                    onPageChanged={onPageChanged}\r\n                    followingInProgress={props.followingInProgress}\r\n                    portionsCount={props.portionsCount}\r\n                    portionSize={props.portionSize}\r\n                    onTermChanged={onTermChanged}\r\n                    term={props.term}\r\n                />\r\n            </>\r\n    )       \r\n}\r\n\r\n \r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        usersData: getUsersData(state),\r\n        pagesCount : getPagesCount(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionsCount: getPortionsCount(state),\r\n        portionSize: getPortionSize(state),\r\n        term: getTerm(state)\r\n    }\r\n}\r\n\r\nconst UsersContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {} , RootStateType>(mapStateToProps, { getUsersThunkCreator, unfollowThunkCreator, followThunkCreator, setCurrentPage, setTerm })(UsersApiComponent)\r\n\r\nexport default React.memo(UsersContainer)"],"names":["props","_jsxs","className","styleUser","user","children","_jsx","NavLink","to","id","avatar","user__noavatar","src","noAvatar","user__avatar","user__description","user__description_name","name","user__description_status","status","pages","i","pagesCount","push","portionNumber","setPortionNumber","useState","leftPortionPageNumber","portionSize","rightPortionPageNumber","stylePaginator","onClick","onPageChanged","arrow","filter","page","map","currentPage","portionsCount","UserSearchForm","Formik","enableReinitialize","initialValues","term","onSubmit","submit","values","_ref","setSubmitting","onTermChanged","_ref2","isSubmitting","Form","styleUsers","search","Field","search__input","onChange","e","currentTarget","value","placeholder","type","search__button_container","disabled","search__button","usersElements","usersData","users__item","User","photos","small","followed","users__button","followingInProgress","some","onUserUnfollow","onUserFollow","users__container","users","paginator","Paginator","getUsersData","state","usersReducer","getPageSize","pageSize","getPagesCount","createSelector","totalUsersCount","Math","ceil","getPortionSize","getPortionsCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getTerm","UsersContainer","connect","getUsersThunkCreator","unfollowThunkCreator","followThunkCreator","setCurrentPage","setTerm","searchParams","setSearchParams","useSearchParams","useEffect","parsed","Object","fromEntries","actualPage","Number","actualTerm","navigate","useNavigate","pathname","concat","_Fragment","Preloader","Users","userId","React"],"sourceRoot":""}