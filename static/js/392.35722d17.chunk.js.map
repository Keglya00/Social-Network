{"version":3,"file":"static/js/392.35722d17.chunk.js","mappings":"2JACA,QAA0B,yBAA1B,EAAoE,gCAApE,EAAwH,mCAAxH,EAAqK,yBAArK,EAA0M,2BAA1M,EAAqQ,+CAArQ,EAAmV,8CAAnV,EAA+Z,6CCA/Z,EAAuB,mB,qBCQvB,MAQA,EARmCA,IAE3BC,EAAAA,EAAAA,KAACC,EAAAA,GAAO,CAACC,GAAO,YAAWC,OAAGJ,EAAUK,QAAUC,UAAWC,EAAeC,SACvER,EAAUS,WCXvB,EAA0B,yBAA1B,EAAoE,gCAApE,EAAqH,gCAArH,EAAqK,+BAArK,EAAuN,kCCmBvN,EAZsCC,IAE9BC,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAAqBJ,SAAA,EACjCP,EAAAA,EAAAA,KAAA,OAAKK,UAAWM,KAChBD,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAA4BJ,SAAA,EACxCP,EAAAA,EAAAA,KAAA,OAAKK,UAAWM,EAA2BJ,SAAEE,EAAMG,WAClDH,EAAMI,cCCvB,EARwCJ,IAEhCT,EAAAA,EAAAA,KAAA,OAAMK,UAAWM,EAA8BJ,SAC1CE,EAAMI,U,+BCkBnB,MAAMC,EAA+BC,EAAAA,MAAYN,KAE7CO,EAAAA,EAAAA,YAAU,KACNP,EAAMQ,UAAU,GACjB,KAEHD,EAAAA,EAAAA,YAAU,KACHP,EAAMS,eACLT,EAAMU,YAAYV,EAAMS,cAC5B,GACD,CAACT,EAAMS,gBAMV,MAAME,GAAoBC,EAAAA,EAAAA,QAAuB,OAEjDL,EAAAA,EAAAA,YAAU,KACW,IAADM,EAAbC,IAC0B,QAAzBD,EAAAF,EAAkBI,eAAO,IAAAF,GAAzBA,EAA2BG,iBAC/B,GACD,CAAChB,EAAMiB,eAEV,MAAOH,EAAcI,IAAiBC,EAAAA,EAAAA,WAAS,GAW/C,IAOIC,EAAgBpB,EAAMV,UAAU+B,KAAKC,IAAS/B,EAAAA,EAAAA,KAAA,MAAIgC,QAASA,KA9BrCC,QA+BHF,EAAKG,GA9BxBzB,EAAM0B,iBAAiBF,IA+BvBG,EAAAA,EAAAA,GAAaL,EAAKG,GAAG,EACvB3B,UAACP,EAAAA,EAAAA,KAACqC,EAAI,CAAC7B,SAAUuB,EAAKnB,SAAUR,OAAO,SAErCkC,EAAmB7B,EAAMiB,aAAaI,KAAKjB,GAAYA,EAAQ0B,WAAa9B,EAAMyB,IACpFlC,EAAAA,EAAAA,KAAA,OAAKK,UAAWmC,EAAuBjC,UAACP,EAAAA,EAAAA,KAACyC,EAAS,CAAC5B,QAASA,EAAQ6B,UACpE1C,EAAAA,EAAAA,KAAA,OAAKK,UAAWmC,EAAqBjC,UAACP,EAAAA,EAAAA,KAAC2C,EAAO,CAAC9B,QAASA,EAAQ6B,KAAM9B,SAAUC,EAAQ+B,iBAG1F,OACIlC,EAAAA,EAAAA,MAAA,OAAKL,UAAWmC,EAAqBjC,SAAA,EACjCP,EAAAA,EAAAA,KAAA,MAAIK,UAAWmC,EAA4BjC,SACtCsB,KAELnB,EAAAA,EAAAA,MAAA,OAAKL,UAAWmC,EAAgCK,SA/BjCC,IACnB,IAAIC,EAAUD,EAAEE,cACbC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,GAC7E1B,GAAc,GAEdA,GAAc,EAClB,EAyB4EpB,SAAA,CACnE+B,GACDtC,EAAAA,EAAAA,KAACsD,EAAc,CAACC,WAxBHC,IACjBA,GAGJ/C,EAAMgD,YAAYhD,EAAMS,cAAesC,EAAW,EAoBKE,SAAUjD,EAAMiD,YAC/D1D,EAAAA,EAAAA,KAAA,OAAK2D,IAAKvC,SAEZ,IAIRkC,EAAqD7C,IAEnDT,EAAAA,EAAAA,KAAC4D,EAAAA,GAAI,CAACC,SAAWC,IAAcrD,EAAM8C,WAAWO,EAASC,eAAe,EAAExD,SACrEyD,IAAA,IAAE,aAAEC,EAAY,KAAEC,GAAKF,EAAA,OACpBtD,EAAAA,EAAAA,MAAA,QAAMmD,SAAUI,EAAc5D,UAAWmC,EAA0CjC,SAAA,EAC/EP,EAAAA,EAAAA,KAACmE,EAAAA,GAAK,CAACC,SAAUC,EAAAA,EAAUC,YAAY,qBAAqBC,UAAW,WAAYC,KAAM,iBAAkBnE,UAAWmC,KACtHxC,EAAAA,EAAAA,KAAA,UAAQyE,SAA6B,UAAnBhE,EAAMiD,SAAsB1B,QAASA,KACnDiC,IACAC,EAAKQ,OAAO,EACbrE,UAAWmC,MACX,IAMvB,I,aC1EA,MAEA,GAFyBmC,E,OAAAA,KAAuBC,EAAAA,EAAAA,KAXzBC,IACZ,CACH9E,UAAW8E,EAAMC,eAAe/E,UAChC2B,aAAcmD,EAAMC,eAAepD,aACnCQ,GAAI2C,EAAME,YAAYC,KAAK9C,GAC3BwB,SAAUmB,EAAMC,eAAepB,SAC/BxC,cAAe2D,EAAMC,eAAe5D,iBAK6F,CAAE+D,eAAc,KAAEC,cAAa,KAAEzB,YAAW,KAAExC,SAAQ,KAAEE,YAAW,IAAEgB,iBAAgB,OAAIgD,EAAAA,EAAzMR,CAA2N7D,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://my-app/./src/components/Dialogs/Chat/Chat.module.scss?2b27","components/Dialogs/Chat/Chat.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.scss?a735","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/MyMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QWDer\",\"dialogs__chats\":\"Dialogs_dialogs__chats__Opjc5\",\"dialogs__messages\":\"Dialogs_dialogs__messages__AeTPA\",\"message\":\"Dialogs_message__CirTE\",\"mymessage\":\"Dialogs_mymessage__Y9tf2\",\"dialogs__addMessages_textarea\":\"Dialogs_dialogs__addMessages_textarea__AG7mQ\",\"dialogs__messages_addMessage\":\"Dialogs_dialogs__messages_addMessage__E+qYV\",\"dialogs__addMessages_button\":\"Dialogs_dialogs__addMessages_button__oMR8J\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__pSHfW\"};","import styleChat from './Chat.module.scss'\r\nimport { NavLink } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    username: string,\r\n    userid: string\r\n}\r\n\r\nconst Chat: React.FC<PropsType> = (chatsData) => {\r\n    return(\r\n        <NavLink to={`${'/dialogs/'}${chatsData.userid}`} className={styleChat.chat}>\r\n            {chatsData.username}\r\n        </NavLink>\r\n    )\r\n}\r\n\r\nexport default Chat","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__ZY+wS\",\"message__inner\":\"Message_message__inner__YllRJ\",\"message__photo\":\"Message_message__photo__cv1PH\",\"message__name\":\"Message_message__name__-kunO\",\"mymessage__inner\":\"Message_mymessage__inner__nYWNE\"};","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    userName: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={styleMessage.message}>\r\n            <img className={styleMessage.message__photo} />\r\n            <div className={styleMessage.message__inner}>\r\n                <div className={styleMessage.message__name}>{props.userName}</div>\r\n                {props.message}\r\n            </div>\r\n        </div>     \r\n    )\r\n} \r\n\r\nexport default Message","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst MyMessage: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div  className={styleMessage.mymessage__inner}>\r\n            {props.message}\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default MyMessage","import React, { useEffect, useRef, useState } from 'react'\r\nimport styleDialogs from './Dialogs.module.scss'\r\nimport Chat from './Chat/Chat.tsx'\r\nimport Message from './Message/Message.tsx'\r\nimport MyMessage from './Message/MyMessage.tsx'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { required } from '../../utilits/validators.ts'\r\nimport { ChatType, MessageType, StatusType} from '../../redux/dialogsReducer'\r\nimport { getCurrenrId } from '../../ApiWsChat.ts'\r\n\r\ntype PropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    id: number,\r\n    wsStatus: StatusType,\r\n    currentUserId: number\r\n    startWsChannel: () => void\r\n    stopWsChannel: () => void\r\n    sendMessage: (userId: number, message: string) => void\r\n    setChats: () => void\r\n    setCurrentUserId: (userId: number) => void\r\n    setMessages: (userId: number) => void\r\n}\r\ntype AddMessageFormPropsType = {\r\n    wsStatus: StatusType\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = React.memo((props) => {\r\n    \r\n    useEffect(() => {\r\n        props.setChats()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(props.currentUserId) {\r\n            props.setMessages(props.currentUserId)\r\n        }\r\n    }, [props.currentUserId])\r\n\r\n    let onSetCurrentUserId = (userId: number) => {\r\n        props.setCurrentUserId(userId)\r\n    } \r\n\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll){\r\n            messagesAnchorRef.current?.scrollIntoView()\r\n        } \r\n    }, [props.messagesData])\r\n\r\n    const [isAutoScroll, setAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 10){\r\n            setAutoScroll(true)\r\n        } else {\r\n            setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    let onAddMessageClick = (newMessage: string) => {\r\n        if(!newMessage){\r\n            return\r\n        }\r\n        props.sendMessage(props.currentUserId, newMessage)\r\n    }\r\n\r\n    let chatsElements = props.chatsData.map((chat) => <li onClick={() => {\r\n        onSetCurrentUserId(chat.id)\r\n        getCurrenrId(chat.id)\r\n    }}><Chat username={chat.userName} userid=''/></li>)\r\n\r\n    let messagesElements = props.messagesData.map((message) => message.senderId === props.id \r\n    ? <div className={styleDialogs.mymessage}><MyMessage message={message.body} /></div>\r\n    : <div className={styleDialogs.message}><Message message={message.body} userName={message.senderName}/></div>\r\n    )\r\n\r\n    return(\r\n        <div className={styleDialogs.dialogs}>\r\n            <ul className={styleDialogs.dialogs__chats}>\r\n                {chatsElements}\r\n            </ul>\r\n            <div className={styleDialogs.dialogs__messages} onScroll={scrollHandler}>\r\n                {messagesElements}\r\n                <AddMessageForm addMessage={onAddMessageClick} wsStatus={props.wsStatus} />\r\n                <div ref={messagesAnchorRef}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={(formData) => {props.addMessage(formData.newMessageBody)}}>\r\n            {( { handleSubmit, form} ) => (\r\n                <form onSubmit={handleSubmit} className={styleDialogs.dialogs__messages_addMessage}>\r\n                    <Field validate={required} placeholder='Enter your message' component={'textarea'} name={'newMessageBody'} className={styleDialogs.dialogs__addMessages_textarea}></Field>\r\n                    <button disabled={props.wsStatus !== 'ready'} onClick={() => {\r\n                        handleSubmit()\r\n                        form.reset()\r\n                    }} className={styleDialogs.dialogs__addMessages_button}></button>\r\n                </form>\r\n            )}\r\n        </Form>   \r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, { ComponentType } from 'react'\r\nimport { ChatType, MessageType, StatusType, sendMessage, setChats, setMessages, setCurrentUserId, startWsChannel, stopWsChannel} from '../../redux/dialogsReducer.ts'\r\nimport { connect } from 'react-redux'\r\nimport Dialogs from './Dialogs.tsx'\r\nimport { withAuthReirect } from '../../hoc/withAuthRedirect.tsx'\r\nimport { compose } from 'redux'\r\nimport { RootStateType } from '../../redux/redux-store.ts'\r\n\r\ntype MapStateToPropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    id: number,\r\n    wsStatus: StatusType,\r\n    currentUserId: number\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    startWsChannel: () => void\r\n    stopWsChannel: () => void\r\n    sendMessage: (userId: number, message: string) => void\r\n    setChats: () => void\r\n    setMessages: (userId: number) => void\r\n    setCurrentUserId: (userId: number) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        chatsData: state.dialogsReducer.chatsData,\r\n        messagesData: state.dialogsReducer.messagesData,\r\n        id: state.authReducer.data.id,\r\n        wsStatus: state.dialogsReducer.wsStatus,\r\n        currentUserId: state.dialogsReducer.currentUserId\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ComponentType>(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>(mapStateToProps, { startWsChannel, stopWsChannel, sendMessage, setChats, setMessages, setCurrentUserId}), withAuthReirect )(Dialogs)\r\n\r\nexport default DialogsContainer"],"names":["chatsData","_jsx","NavLink","to","concat","userid","className","styleChat","children","username","props","_jsxs","styleMessage","userName","message","Dialogs","React","useEffect","setChats","currentUserId","setMessages","messagesAnchorRef","useRef","_messagesAnchorRef$cu","isAutoScroll","current","scrollIntoView","messagesData","setAutoScroll","useState","chatsElements","map","chat","onClick","userId","id","setCurrentUserId","getCurrenrId","Chat","messagesElements","senderId","styleDialogs","MyMessage","body","Message","senderName","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","AddMessageForm","addMessage","newMessage","sendMessage","wsStatus","ref","Form","onSubmit","formData","newMessageBody","_ref","handleSubmit","form","Field","validate","required","placeholder","component","name","disabled","reset","compose","connect","state","dialogsReducer","authReducer","data","startWsChannel","stopWsChannel","withAuthReirect"],"sourceRoot":""}