{"version":3,"file":"static/js/645.eb041ead.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.scss?d037","webpack://my-app/./src/components/Dialogs/Chat/Chat.module.scss?2b27","components/Dialogs/Chat/Chat.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.scss?a735","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/MyMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QWDer\",\"dialogs__notSelected\":\"Dialogs_dialogs__notSelected__Jvkiv\",\"dialogs__messages_container\":\"Dialogs_dialogs__messages_container__WdTk1\",\"dialogs__chats\":\"Dialogs_dialogs__chats__Opjc5\",\"dialogs__messages\":\"Dialogs_dialogs__messages__AeTPA\",\"message\":\"Dialogs_message__CirTE\",\"mymessage\":\"Dialogs_mymessage__Y9tf2\",\"dialogs__user_container\":\"Dialogs_dialogs__user_container__DBF-k\",\"dialogs__user\":\"Dialogs_dialogs__user__g5xJM\",\"dialogs__user_photo\":\"Dialogs_dialogs__user_photo__pCTWr\",\"dialogs__user_name\":\"Dialogs_dialogs__user_name__sawdv\",\"dialogs__addMessages_textarea\":\"Dialogs_dialogs__addMessages_textarea__AG7mQ\",\"dialogs__messages_addMessage\":\"Dialogs_dialogs__messages_addMessage__E+qYV\",\"dialogs__addMessages_button\":\"Dialogs_dialogs__addMessages_button__oMR8J\",\"dialogs__addMessages_icon\":\"Dialogs_dialogs__addMessages_icon__YaTao\"};","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"Chat_chat__pSHfW\",\"chat__photo\":\"Chat_chat__photo__e+h3t\",\"chat__username\":\"Chat_chat__username__OReV2\"};","import styleChat from './Chat.module.scss'\r\nimport noAvatar from '../../../emptyAvatar.jpg'\r\nimport { NavLink } from 'react-router-dom'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    username: string,\r\n    photo: string\r\n}\r\n\r\nconst Chat: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={styleChat.chat}>\r\n            <div>\r\n                <img className={styleChat.chat__photo} src={props.photo || noAvatar}/>\r\n            </div>\r\n            <div className={styleChat.chat__username}>\r\n                {props.username}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__ZY+wS\",\"message__inner\":\"Message_message__inner__YllRJ\",\"message__photo\":\"Message_message__photo__cv1PH\",\"message__name\":\"Message_message__name__-kunO\",\"mymessage__inner\":\"Message_mymessage__inner__nYWNE\"};","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={styleMessage.message}>\r\n            <div className={styleMessage.message__inner}>\r\n                {props.message}\r\n            </div>\r\n        </div>     \r\n    )\r\n} \r\n\r\nexport default Message","import styleMessage from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst MyMessage: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div  className={styleMessage.mymessage__inner}>\r\n            {props.message}\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default MyMessage","import React, { useEffect, useRef, useState } from 'react'\r\nimport styleDialogs from './Dialogs.module.scss'\r\nimport noAvatar from '../../emptyAvatar.jpg'\r\nimport Chat from './Chat/Chat.tsx'\r\nimport sendIcon from '../../images/send-icon.png'\r\nimport Message from './Message/Message.tsx'\r\nimport MyMessage from './Message/MyMessage.tsx'\r\nimport { Field, Form } from 'react-final-form'\r\nimport { required } from '../../utilits/validators.ts'\r\nimport { ChatType, CurrentUserDataType, MessageType, StatusType} from '../../redux/dialogsReducer'\r\nimport { getCurrenrId } from '../../ApiWsChat.ts'\r\n\r\ntype PropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    id: number,\r\n    wsStatus: StatusType,\r\n    currentUserId: number,\r\n    currentUserData: CurrentUserDataType\r\n    startWsChannel: () => void\r\n    stopWsChannel: () => void\r\n    sendMessage: (userId: number, message: string) => void\r\n    setChats: () => void\r\n    setCurrentUserId: (userId: number) => void\r\n    setMessages: (userId: number) => void\r\n    setCurrentUserData: (userName: string, photo: string) => void\r\n}\r\ntype AddMessageFormPropsType = {\r\n    wsStatus: StatusType\r\n    addMessage: (message: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = React.memo((props) => {\r\n    \r\n    useEffect(() => {\r\n        props.setChats()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(props.currentUserId) {\r\n            props.setMessages(props.currentUserId)\r\n        }\r\n    }, [props.currentUserId])\r\n\r\n    let onSetCurrentUserId = (userId: number) => {\r\n        props.setCurrentUserId(userId)\r\n    } \r\n\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll){\r\n            messagesAnchorRef.current?.scrollIntoView()\r\n        } \r\n    }, [props.messagesData])\r\n\r\n    const [isAutoScroll, setAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        let element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 10){\r\n            setAutoScroll(true)\r\n        } else {\r\n            setAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    let onAddMessageClick = (newMessage: string) => {\r\n        if(!newMessage){\r\n            return\r\n        }\r\n        props.sendMessage(props.currentUserId, newMessage)\r\n    }\r\n\r\n    let chatsElements = props.chatsData.map((chat) => <li onClick={() => {\r\n        onSetCurrentUserId(chat.id)\r\n        props.setCurrentUserData(chat.userName, chat.photos.large)\r\n        getCurrenrId(chat.id)\r\n    }}><Chat username={chat.userName} photo={chat.photos.large}/></li>)\r\n\r\n    let messagesElements = props.messagesData.map((message) => message.senderId === props.id \r\n    ? <div className={styleDialogs.mymessage}><MyMessage message={message.body} /></div>\r\n    : <div className={styleDialogs.message}><Message message={message.body}/></div>\r\n    )\r\n\r\n    return(\r\n        <div className={styleDialogs.dialogs}>\r\n            <ul className={styleDialogs.dialogs__chats}>\r\n                {chatsElements}\r\n            </ul>\r\n            {props.currentUserId ?\r\n            <div>\r\n                <div className={styleDialogs.dialogs__user_container}> \r\n                    <div className={styleDialogs.dialogs__user}>\r\n                        <div><img className={styleDialogs.dialogs__user_photo} src={props.currentUserData.photo || noAvatar} /></div>\r\n                        <div className={styleDialogs.dialogs__user_name}>{props.currentUserData.userName}</div>\r\n                    </div>\r\n                </div>\r\n                <div className={styleDialogs.dialogs__messages_container}>\r\n                    <div className={styleDialogs.dialogs__messages} onScroll={scrollHandler}>\r\n                        {messagesElements}\r\n                        {props.currentUserId ? <AddMessageForm addMessage={onAddMessageClick} wsStatus={props.wsStatus} /> : null}\r\n                        <div ref={messagesAnchorRef}></div>\r\n                    </div>\r\n                </div>\r\n            </div> :\r\n            <div className={styleDialogs.dialogs__notSelected}></div>\r\n            }   \r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\r\n    return (\r\n        <Form onSubmit={(formData) => {props.addMessage(formData.newMessageBody)}}>\r\n            {( { handleSubmit, form} ) => (\r\n                <form onSubmit={handleSubmit} className={styleDialogs.dialogs__messages_addMessage}>\r\n                    <Field validate={required} placeholder='Message' component={'textarea'} name={'newMessageBody'} className={styleDialogs.dialogs__addMessages_textarea}></Field>\r\n                    <button disabled={props.wsStatus !== 'ready'} onClick={() => {\r\n                        handleSubmit()\r\n                        form.reset()\r\n                    }} className={styleDialogs.dialogs__addMessages_button}><img className={styleDialogs.dialogs__addMessages_icon} src={sendIcon} /></button>\r\n                </form>\r\n            )}\r\n        </Form>   \r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, { ComponentType } from 'react'\r\nimport { ChatType, MessageType, StatusType, sendMessage, setChats, setMessages, setCurrentUserId, startWsChannel, stopWsChannel, setCurrentUserData, CurrentUserDataType} from '../../redux/dialogsReducer.ts'\r\nimport { connect } from 'react-redux'\r\nimport Dialogs from './Dialogs.tsx'\r\nimport { withAuthReirect } from '../../hoc/withAuthRedirect.tsx'\r\nimport { compose } from 'redux'\r\nimport { RootStateType } from '../../redux/redux-store.ts'\r\n\r\ntype MapStateToPropsType = {\r\n    chatsData: Array<ChatType>,\r\n    messagesData: Array<MessageType>,\r\n    id: number,\r\n    wsStatus: StatusType,\r\n    currentUserId: number,\r\n    currentUserData: CurrentUserDataType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    startWsChannel: () => void\r\n    stopWsChannel: () => void\r\n    sendMessage: (userId: number, message: string) => void\r\n    setChats: () => void\r\n    setMessages: (userId: number) => void\r\n    setCurrentUserId: (userId: number) => void\r\n    setCurrentUserData: (userName: string, photo: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        chatsData: state.dialogsReducer.chatsData,\r\n        messagesData: state.dialogsReducer.messagesData,\r\n        id: state.authReducer.data.id,\r\n        wsStatus: state.dialogsReducer.wsStatus,\r\n        currentUserId: state.dialogsReducer.currentUserId,\r\n        currentUserData: state.dialogsReducer.currentUserData\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<ComponentType>(connect<MapStateToPropsType, MapDispatchToPropsType, {}, RootStateType>(mapStateToProps, { startWsChannel, stopWsChannel, setCurrentUserData, sendMessage, setChats, setMessages, setCurrentUserId}), withAuthReirect )(Dialogs)\r\n\r\nexport default DialogsContainer"],"names":["props","_jsxs","className","styleChat","children","_jsx","src","photo","noAvatar","username","styleMessage","message","Dialogs","React","useEffect","setChats","currentUserId","setMessages","messagesAnchorRef","useRef","_messagesAnchorRef$cu","isAutoScroll","current","scrollIntoView","messagesData","setAutoScroll","useState","chatsElements","chatsData","map","chat","onClick","userId","id","setCurrentUserId","setCurrentUserData","userName","photos","large","getCurrenrId","Chat","messagesElements","senderId","styleDialogs","MyMessage","body","Message","currentUserData","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","AddMessageForm","addMessage","newMessage","sendMessage","wsStatus","ref","Form","onSubmit","formData","newMessageBody","_ref","handleSubmit","form","Field","validate","required","placeholder","component","name","disabled","reset","compose","connect","state","dialogsReducer","authReducer","data","startWsChannel","stopWsChannel","withAuthReirect"],"sourceRoot":""}